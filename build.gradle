plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id "io.freefair.lombok" version "6.0.0-m2"
}

group 'com.alenashomanova'
version '1.0-SNAPSHOT'
compileJava.options.encoding = 'UTF-8' // устанавливает кодировку для компилируемого кода
javadoc.options.encoding = 'UTF-8' // устанавливает кодировку для генерируемой документации
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

def selenideVersion = "6.13.0",
    restAssuredVersion = "5.3.0",
    allureVersion = "2.21.0",
    slf4jVersion = "2.0.7"

allure {
    report {
        version.set(allureVersion)
    }
    adapter { //отвечает за появление allure-results
        aspectjWeaver.set(true) //Обработка аннотации @Step
        frameworks {
            junit5 { //framework name
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.1',     // JUnit5
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "com.codeborne:selenide:$selenideVersion",                  // Selenide
            "io.qameta.allure:allure-selenide:$allureVersion",                  // Allure Selenide
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            'org.aeonbits.owner:owner:1.0.12',                          // Owner lib to make configs
            'org.assertj:assertj-core:3.23.1',                          // Assertions
            'org.postgresql:postgresql:42.5.1',                          // To connect to a PostrgreSQL DB
            "org.slf4j:slf4j-simple:$slf4jVersion",
            'commons-io:commons-io:2.11.0',
            "io.appium:java-client:8.3.0",
            'com.google.code.gson:gson:2.10.1',
            'com.browserstack:browserstack-local-java:1.1.0'
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'      // JUnit5
}


test {
    useJUnitPlatform()
    systemProperties(System.getProperties())

}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}


tasks.register('web_test', Test) {
    useJUnitPlatform {
        includeTags("web")
    }
}

tasks.register('kazpost_test', Test) {
    useJUnitPlatform {
        includeTags("kazpost")
    }
}

tasks.register('mobile_test', Test) {
    useJUnitPlatform {
        includeTags("mobile")
    }
}

tasks.register('tabys_test', Test) {
    useJUnitPlatform {
        includeTags("tabys")
    }
}

tasks.register('ipo_test', Test) {
    useJUnitPlatform {
        includeTags("ipo")
    }
}

tasks.register('sample_web', Test) {
    useJUnitPlatform {
        includeTags("sample")
    }
}

tasks.register('sample_mobile', Test) {
    useJUnitPlatform {
        includeTags("sample-mobile")
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

